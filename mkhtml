#!/opt/bin/emacs --script
;;; -*- emacs-lisp -*-

;;; mkhtml --- A simple S-expression to HTML translator.

;; Keywords: HTML SEXP CBCL

;; Author   : jakob@canned.primat.es
;; Created  : early 2007
;; Modified : $Date: 2008/10/10 14:56:55 $

;;; Commentary:

;; MKHTML translates hypertext markup in SEXP notation to standard
;; XML-style notation. Examples:
;;
;;  (foo "bar baz quux frob")    => <foo>bar baz quux frob</foo>
;;  (foo :bar "baz" "quux frob") => <foo bar="baz">quux frob</foo>
;;  (foo)                        => <foo />
;;
;; MKHTML loads and expands `defmacro' forms, which may either be included in
;; the source file or placed in a special file called macros.el and located in
;; the same directory as mkhtml. Macro names must begin with two underscores.
;;
;; MKHTML emits the doctype declaration and top-level <html> tags
;; automatically.
;;
;; MKHTML is run by saying
;;   $ ./mkhtml mysource.el > mysource.html
;;

;;; Code:

(eval-when-compile
  (require 'cl))

(defconst mkhtml-header "
<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
 \"http://www.w3.org/TR/HTML4.01/loose.dtd\">

<!-- generated by emacs, do not modify -->

<html>
")

(defconst mkhtml-footer "
</html>

<!-- eof -->
")

(defun main (args)
  (when (not (= (length args) 1))
    (usage))
  (include "./" "macros.el")
  (setq max-lisp-eval-depth 2000)
  (mkhtml-translate (car args)))

(defun usage ()
  (error "usage: mkhtml file"))

(defun include (dir file)
  (let ((file (concat dir file)))
    (when (file-readable-p file)
      (add-to-list 'load-path dir)
      (load file))))

(defun mkhtml-translate (source)
  (mkhtml--emit
   (mkhtml--generate
    (mkhtml--parse
     (mkhtml--read source)))))

(defun mkhtml--read (file)
  (with-temp-buffer
    (insert-file-contents file)
    (beginning-of-buffer)
    (let ((buffer (current-buffer))
          (dir    (file-name-directory file))
          result)
      (condition-case nil
          (while t
            (let ((sexp (read buffer)))
              (case (car sexp)
                (defmacro  (eval sexp))
                (defun     (eval sexp))
                (include   (include dir (cadr sexp)))
                (otherwise (push sexp result)))))
         (end-of-file (reverse result))
         (error       (error "Bad input."))))))

(defun mkhtml--parse (sexps)
  (mapcar #'mkhtml--parse-sexp
          (mapcar #'mkhtml--escape
                  (mapcar #'mkhtml--macroexpand sexps))))

;; TODO: allow macro as root element
(defun mkhtml--walk-sexp (sexp pred proc)
  (labels ((walk (sexp)
             (cond ((null sexp)
                    '())
                   ((funcall pred (car sexp))
                    (cons (funcall proc (car sexp))
                          (walk (cdr sexp))))
                   ((consp (car sexp))
                    (cons (walk (car sexp))
                          (walk (cdr sexp))))
                   (t
                    (cons (car sexp)
                          (walk (cdr sexp)))))))
    (walk sexp)))

;; TODO: allow special macros which return a list of sexps to be spliced into
;; the cdr
(defun mkhtml--macroexpand (sexp)
  (mkhtml--walk-sexp
   sexp
   (lambda (x)
     (if (and (consp x)
              (symbolp (car x)))
         (let ((x (symbol-name (car x))))
           (and (> (length x) 2)
                (string= (substring x 0 2) "__")))
       nil))
   #'cl-macroexpand-all))

(assert
 (defmacro __test (x) `(x x))
 (equal (mkhtml--macroexpand '(foo (__test bar)))
        '(foo (bar bar)) ))

(defun mkhtml--escape (sexp)
  (mkhtml--walk-sexp
   sexp
   #'stringp
   (lambda (str)
     (progn (mapc (lambda (elt)
                    (setq str
                          (replace-regexp-in-string
                           (car elt)
                           (cdr elt)
                           str)))
                  `((,(rx ?& (or (not (any ?#)) eos))
                     . (lambda (match)
                         (concat "&amp;" (substring match 1))))
                    ("<"  . "&lt;")
                    (">"  . "&gt;")
                    ("\"" . "&quot;")))
            str))))

(assert (equal (mkhtml--escape '(foo "&"))
               '(foo "&amp;") ))
(assert (equal (mkhtml--escape '(foo (bar "<<chip&dale mmorpg>>")))
               '(foo (bar "&lt;&lt;chip&amp;dale mmorpg&gt;&gt;")) ))
(assert (equal (mkhtml--escape '(foo (bar "G&#233;rard")))
               '(foo (bar "G&#233;rard")) ))
(assert (equal (mkhtml--escape '(foo (bar "Frob &#169; Frob")))
               '(foo (bar "Frob &#169; Frob")) ))
(assert (equal (mkhtml--escape '(foo (bar "foo&bar;")))
               '(foo (bar "foo&amp;bar;")) ))
(assert (equal (mkhtml--escape '(foo (bar "foo bar baz")))
               '(foo (bar "foo bar baz")) ))

(defun mkhtml--parse-sexp (sexp)
  (unless (mkhtml--valid-sexp-p sexp)
    (error "Bad SEXP."))
  (multiple-value-apply #'mkhtml--really-parse-sexp
                        (mkhtml--get-attributes sexp)))

;;   document  ::= sexp+
;;   sexp      ::= '(' symbol sexp'* ')'
;;   sexp'     ::= attribute | string | sexp
;;   attribute ::= keyword string
(defun mkhtml--valid-sexp-p (sexp)
  (labels ((validp (sexp)
             (cond ((null sexp)
                    t)
                   ((consp (car sexp))
                    (and (mkhtml--valid-sexp-p (car sexp))
                         (validp (cdr sexp))))
                   ((keywordp (car sexp))
                    (and (stringp (cadr sexp))
                         (validp  (cddr sexp))))
                   ((stringp (car sexp))
                    (validp (cdr sexp)))
                   (t nil))))
    (and (symbolp (car sexp))
         (validp  (cdr sexp)))))

(assert (equal (mkhtml--valid-sexp-p '(foo :bar "baz" "quux"))      t))
(assert (equal (mkhtml--valid-sexp-p '(foo (bar "baz")))            t))
(assert (equal (mkhtml--valid-sexp-p '(foo))                        t))
(assert (equal (mkhtml--valid-sexp-p '(foo :bar baz))             nil))
(assert (equal (mkhtml--valid-sexp-p '(foo (bar 42)))             nil))
(assert (equal (mkhtml--valid-sexp-p '(foo "bar" (baz :quux)))    nil))
(assert (equal (mkhtml--valid-sexp-p '(foo "bar" ("baz" "quux"))) nil))
(assert (equal (mkhtml--valid-sexp-p '(foo "bar" (baz quux)))     nil))

(defun mkhtml--get-attributes (sexp)
  (let (attributes rest)
    (while (not (null sexp))
      (if (keywordp (car sexp))
          (push (cons (car sexp) (cadr sexp)) attributes) ;known to be valid
        (push (car sexp) rest))
      (if (keywordp (car sexp))
          (setq sexp (cddr sexp))
        (setq sexp (cdr sexp))))
    (values (reverse attributes) (reverse rest))))

(assert (equal (mkhtml--get-attributes '())          '(() ())          ))
(assert (equal (mkhtml--get-attributes '(foo))       '(() (foo))       ))
(assert (equal (mkhtml--get-attributes '(foo "bar")) '(() (foo "bar")) ))
(assert (equal (mkhtml--get-attributes '(foo :bar "baz" "quux"))
               '(((:bar . "baz")) (foo "quux"))                        ))
(assert (equal (mkhtml--get-attributes '(foo "quux" :bar "baz"))
               '(((:bar . "baz")) (foo "quux"))                        ))
(assert (equal (mkhtml--get-attributes '(foo (frob :blorg "quux" "baz")))
               '(() (foo (frob :blorg "quux" "baz")))                  ))

(defstruct mkhtml--node
  (type       :read-only t)  ;'inner | 'leaf
  (tag        :read-only t)  ;symbol | nil
  (attributes :read-only t)  ;((keyword . string)) | nil
  (content    :read-only t)) ;(node) | string

(defun mkhtml--mk-inner (tag attrs content)
  (make-mkhtml--node :type       'inner
                     :tag        tag
                     :attributes attrs
                     :content    content))

(defun mkhtml--mk-leaf (content)
  (make-mkhtml--node :type       'leaf
                     :tag        nil
                     :attributes nil
                     :content    content))

(defun mkhtml--really-parse-sexp (attrs rest)
  (let (nodes)
    (dolist (elt (cdr rest) (mkhtml--mk-inner (car rest) attrs (reverse nodes)))
      (etypecase elt
        (string (push (mkhtml--mk-leaf elt)    nodes))
        (cons   (push (mkhtml--parse-sexp elt) nodes))))))

(assert (equal (mkhtml--really-parse-sexp nil '(foo "bar"))
               (mkhtml--mk-inner 'foo nil `(,(mkhtml--mk-leaf "bar"))) ))
(assert (equal (mkhtml--really-parse-sexp nil '())
               (mkhtml--mk-inner nil nil nil) ))
(assert (equal (mkhtml--really-parse-sexp
                '((:bar . "baz"))
                '(foo "quux" (frob) "unf" (blarg :frob "frob" (blorp "snarf"))))

               (mkhtml--mk-inner 'foo '((:bar . "baz"))
                              `(,(mkhtml--mk-leaf "quux")
                                ,(mkhtml--mk-inner 'frob nil nil)
                                ,(mkhtml--mk-leaf "unf")
                                ,(mkhtml--mk-inner 'blarg '((:frob . "frob"))
                                   (list
                                    (mkhtml--mk-inner
                                     'blorp nil
                                     (list (mkhtml--mk-leaf "snarf")))))))
               ))

(defun mkhtml--generate (trees)
  (mapcar #'mkhtml--generate-tree trees))

(defun mkhtml--keyword-to-string (keyword)
  (substring (symbol-name keyword) 1))

(assert (equal (mkhtml--keyword-to-string :foo) "foo"))

;; XXX mapconcat?
(defun mkhtml--attributes-to-string (attributes)
  (apply #'concat
         (mapcar (lambda (pair)
                   (concat " " (mkhtml--keyword-to-string (car pair))
                           "=\"" (cdr pair) "\""))
                 attributes)))

(assert (equal (mkhtml--attributes-to-string '((:bar . "bar") (:baz . "baz")))
               " bar=\"bar\" baz=\"baz\"" ))
(assert (equal (mkhtml--attributes-to-string nil) "" ))

(defun mkhtml--make-tag (element attributes content)
  (let ((tag        (symbol-name element))
        (attributes (mkhtml--attributes-to-string attributes)))
    (if (null content)
        (concat "<" tag attributes " />")
      (concat "<" tag attributes ">" (apply #'concat content) "</" tag ">"))))

(assert (equal (mkhtml--make-tag 'foo '((:bar . "baz")) '("foo" "<bar>quux</bar>"))
               "<foo bar=\"baz\">foo<bar>quux</bar></foo>" ))
(assert (equal (mkhtml--make-tag 'frob nil nil) "<frob />" ))
(assert (equal (mkhtml--make-tag 'frob '((:bar . "baz")) nil)
               "<frob bar=\"baz\" />" ))

;; TODO: do rudimentary pretty printing
(defun mkhtml--generate-tree (tree)
  (if (eq (mkhtml--node-type tree) 'leaf)
      (mkhtml--node-content tree) ;first call will take else branch
    (mkhtml--make-tag (mkhtml--node-tag tree)
                      (mkhtml--node-attributes tree)
                      (mkhtml--generate (mkhtml--node-content tree)))))

(assert (equal
         (mkhtml--generate-tree
          (mkhtml--mk-inner 'foo '((:bar . "baz"))
                         `(,(mkhtml--mk-leaf "quux")
                           ,(mkhtml--mk-inner 'frob nil nil)
                           ,(mkhtml--mk-leaf "unf")
                           ,(mkhtml--mk-inner 'blarg '((:frob . "frob"))
                              (list
                               (mkhtml--mk-inner 'blorp nil
                                 (list (mkhtml--mk-leaf "snarf"))))))))
         "<foo bar=\"baz\">quux<frob />unf<blarg frob=\"frob\"><blorp>snarf</blorp></blarg></foo>"
         ))

(defun mkhtml--emit (file strs)
  (with-temp-file file
    (insert mkhtml-header)
    (mapc #'insert strs)
    (insert mkhtml-footer)))

;; Do the business
(when noninteractive
  (main command-line-args-left))

(provide 'mkhtml)

;;; mkhtml ends here
